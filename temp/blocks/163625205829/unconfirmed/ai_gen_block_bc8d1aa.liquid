{% doc %}
  @prompt
    make me a collections slider that shows three collection at a time
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collections-slider-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-collections-slider__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collections-slider__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.heading_alignment }};
    margin-bottom: 40px;
  }

  .ai-collections-slider__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
  }

  .ai-collections-slider__wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-collections-slider__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.gap }}px;
    overflow: hidden;
    scroll-behavior: smooth;
  }

  .ai-collections-slider__slide-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - ({{ block.settings.gap }}px * 2)) / 3);
    min-width: calc((100% - ({{ block.settings.gap }}px * 2)) / 3);
  }

  .ai-collections-slider__card-{{ ai_gen_id }} {
    position: relative;
    display: block;
    text-decoration: none;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    transition: transform 0.3s ease;
  }

  .ai-collections-slider__card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
  }

  .ai-collections-slider__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: {{ block.settings.image_ratio }}%;
    overflow: hidden;
    background-color: #f4f4f4;
  }

  .ai-collections-slider__image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-collections-slider__image-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-collections-slider__image-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-collections-slider__overlay-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 20px;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
  }

  .ai-collections-slider__collection-title-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: {{ block.settings.card_title_size }}px;
    margin: 0;
    font-weight: 600;
  }

  .ai-collections-slider__collection-count-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: 14px;
    margin-top: 4px;
    opacity: 0.9;
  }

  .ai-collections-slider__nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;
    margin-top: 30px;
  }

  .ai-collections-slider__button-{{ ai_gen_id }} {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_icon_color }};
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .ai-collections-slider__button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-collections-slider__button-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .ai-collections-slider__button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-collections-slider__dots-{{ ai_gen_id }} {
    display: flex;
    gap: 8px;
  }

  .ai-collections-slider__dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: {{ block.settings.button_color }};
    opacity: 0.3;
    border: none;
    cursor: pointer;
    padding: 0;
    transition: opacity 0.3s ease;
  }

  .ai-collections-slider__dot-{{ ai_gen_id }}.active {
    opacity: 1;
  }

  .ai-collections-slider__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-collections-slider__empty-state-{{ ai_gen_id }} p {
    margin: 0;
    font-size: 16px;
  }

  @media screen and (max-width: 989px) {
    .ai-collections-slider__slide-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - {{ block.settings.gap }}px) / 2);
      min-width: calc((100% - {{ block.settings.gap }}px) / 2);
    }
  }

  @media screen and (max-width: 749px) {
    .ai-collections-slider__slide-{{ ai_gen_id }} {
      flex: 0 0 100%;
      min-width: 100%;
    }

    .ai-collections-slider__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<collections-slider-{{ ai_gen_id }} class="ai-collections-slider-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-collections-slider__container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <div class="ai-collections-slider__header-{{ ai_gen_id }}">
        <h2 class="ai-collections-slider__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      </div>
    {% endif %}

    {% assign has_collections = false %}
    {% for i in (1..6) %}
      {% assign collection_key = 'collection_' | append: i %}
      {% if block.settings[collection_key] != blank %}
        {% assign has_collections = true %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if has_collections %}
      <div class="ai-collections-slider__wrapper-{{ ai_gen_id }}">
        <div class="ai-collections-slider__track-{{ ai_gen_id }}" data-slider-track>
          {% for i in (1..6) %}
            {% assign collection_key = 'collection_' | append: i %}
            {% assign collection = block.settings[collection_key] %}
            
            {% if collection != blank %}
              <div class="ai-collections-slider__slide-{{ ai_gen_id }}">
                <a href="{{ collection.url }}" class="ai-collections-slider__card-{{ ai_gen_id }}">
                  <div class="ai-collections-slider__image-wrapper-{{ ai_gen_id }}">
                    {% if collection.featured_image %}
                      <img
                        src="{{ collection.featured_image | image_url: width: 600 }}"
                        alt="{{ collection.featured_image.alt | escape }}"
                        class="ai-collections-slider__image-{{ ai_gen_id }}"
                        loading="lazy"
                        width="600"
                        height="{{ 600 | times: block.settings.image_ratio | divided_by: 100 }}"
                      >
                    {% else %}
                      <div class="ai-collections-slider__image-placeholder-{{ ai_gen_id }}">
                        {{ 'collection-1' | placeholder_svg_tag }}
                      </div>
                    {% endif %}
                    
                    <div class="ai-collections-slider__overlay-{{ ai_gen_id }}">
                      <h3 class="ai-collections-slider__collection-title-{{ ai_gen_id }}">
                        {{ collection.title }}
                      </h3>
                      {% if block.settings.show_product_count %}
                        <p class="ai-collections-slider__collection-count-{{ ai_gen_id }}">
                          {{ collection.products_count }} 
                          {% if collection.products_count == 1 %}
                            product
                          {% else %}
                            products
                          {% endif %}
                        </p>
                      {% endif %}
                    </div>
                  </div>
                </a>
              </div>
            {% endif %}
          {% endfor %}
        </div>

        <div class="ai-collections-slider__nav-{{ ai_gen_id }}">
          <button
            class="ai-collections-slider__button-{{ ai_gen_id }}"
            data-slider-prev
            aria-label="Previous slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
          </button>

          <div class="ai-collections-slider__dots-{{ ai_gen_id }}" data-slider-dots></div>

          <button
            class="ai-collections-slider__button-{{ ai_gen_id }}"
            data-slider-next
            aria-label="Next slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        </div>
      </div>
    {% else %}
      <div class="ai-collections-slider__empty-state-{{ ai_gen_id }}">
        <p>Next, add collections to display in the slider</p>
      </div>
    {% endif %}
  </div>
</collections-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionsSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.slidesPerView = 3;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-slider-track]');
        this.slides = this.querySelectorAll('.ai-collections-slider__slide-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('[data-slider-prev]');
        this.nextButton = this.querySelector('[data-slider-next]');
        this.dotsContainer = this.querySelector('[data-slider-dots]');

        if (!this.track || this.slides.length === 0) return;

        this.updateSlidesPerView();
        this.createDots();
        this.setupEventListeners();
        this.updateSlider();

        window.addEventListener('resize', () => {
          this.updateSlidesPerView();
          this.createDots();
          this.updateSlider();
        });
      }

      updateSlidesPerView() {
        const width = window.innerWidth;
        if (width <= 749) {
          this.slidesPerView = 1;
        } else if (width <= 989) {
          this.slidesPerView = 2;
        } else {
          this.slidesPerView = 3;
        }
      }

      createDots() {
        if (!this.dotsContainer) return;
        
        this.dotsContainer.innerHTML = '';
        this.totalPages = Math.ceil(this.slides.length / this.slidesPerView);

        for (let i = 0; i < this.totalPages; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-collections-slider__dot-{{ ai_gen_id }}';
          dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
          dot.addEventListener('click', () => this.goToPage(i));
          this.dotsContainer.appendChild(dot);
        }

        this.updateDots();
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prev());
        }
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.next());
        }
      }

      prev() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
          this.updateSlider();
        }
      }

      next() {
        const maxIndex = Math.ceil(this.slides.length / this.slidesPerView) - 1;
        if (this.currentIndex < maxIndex) {
          this.currentIndex++;
          this.updateSlider();
        }
      }

      goToPage(index) {
        this.currentIndex = index;
        this.updateSlider();
      }

      updateSlider() {
        const slideWidth = this.slides[0].offsetWidth;
        const gap = {{ block.settings.gap }};
        const offset = -(this.currentIndex * this.slidesPerView * (slideWidth + gap));
        
        this.track.style.transform = `translateX(${offset}px)`;
        
        this.updateButtons();
        this.updateDots();
      }

      updateButtons() {
        const maxIndex = Math.ceil(this.slides.length / this.slidesPerView) - 1;
        
        if (this.prevButton) {
          this.prevButton.disabled = this.currentIndex === 0;
        }
        if (this.nextButton) {
          this.nextButton.disabled = this.currentIndex >= maxIndex;
        }
      }

      updateDots() {
        const dots = this.dotsContainer.querySelectorAll('.ai-collections-slider__dot-{{ ai_gen_id }}');
        dots.forEach((dot, index) => {
          if (index === this.currentIndex) {
            dot.classList.add('active');
          } else {
            dot.classList.remove('active');
          }
        });
      }
    }

    customElements.define('collections-slider-{{ ai_gen_id }}', CollectionsSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collections slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Shop by collection"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "checkbox",
      "id": "show_product_count",
      "label": "Show product count",
      "default": true
    },
    {
      "type": "header",
      "content": "Collections"
    },
    {
      "type": "collection",
      "id": "collection_1",
      "label": "Collection 1"
    },
    {
      "type": "collection",
      "id": "collection_2",
      "label": "Collection 2"
    },
    {
      "type": "collection",
      "id": "collection_3",
      "label": "Collection 3"
    },
    {
      "type": "collection",
      "id": "collection_4",
      "label": "Collection 4"
    },
    {
      "type": "collection",
      "id": "collection_5",
      "label": "Collection 5"
    },
    {
      "type": "collection",
      "id": "collection_6",
      "label": "Collection 6"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "gap",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between slides",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Card style"
    },
    {
      "type": "range",
      "id": "image_ratio",
      "min": 50,
      "max": 150,
      "step": 10,
      "unit": "%",
      "label": "Image aspect ratio",
      "default": 100
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "card_title_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Card title size",
      "default": 20
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Card text color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#121212"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_icon_color",
      "label": "Button icon color",
      "default": "#FFFFFF"
    }
  ],
  "presets": [
    {
      "name": "Collections slider"
    }
  ]
}
{% endschema %}
