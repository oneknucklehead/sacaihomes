{% doc %}
  @prompt
    make me a collection list slider that shows 3 collections at a tmie, the sliding functionality is not smooth, make it infinitely scrollable, please don't make it automatically slide
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-slider-{{ ai_gen_id }} {
    padding: {{ block.settings.padding_top }}px 0 {{ block.settings.padding_bottom }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-collection-slider__container-{{ ai_gen_id }} {
    max-width: {{ block.settings.container_width }}px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collection-slider__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.heading_alignment }};
    margin-bottom: 40px;
  }

  .ai-collection-slider__heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
  }

  .ai-collection-slider__wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-collection-slider__track-container-{{ ai_gen_id }} {
    overflow: hidden;
  }

  .ai-collection-slider__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.gap }}px;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
  }

  .ai-collection-slider__track-{{ ai_gen_id }}.no-transition {
    transition: none;
  }

  .ai-collection-slider__slide-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - ({{ block.settings.gap }}px * 2)) / 3);
    min-width: calc((100% - ({{ block.settings.gap }}px * 2)) / 3);
  }

  .ai-collection-slider__card-{{ ai_gen_id }} {
    position: relative;
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    height: {{ block.settings.card_height }}px;
    display: block;
    text-decoration: none;
  }

  .ai-collection-slider__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .ai-collection-slider__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .ai-collection-slider__card-{{ ai_gen_id }}:hover .ai-collection-slider__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-collection-slider__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-collection-slider__placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 200px;
    max-height: 200px;
    opacity: 0.3;
  }

  .ai-collection-slider__overlay-{{ ai_gen_id }} {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 30px 20px;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
    color: #ffffff;
  }

  .ai-collection-slider__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.collection_title_size }}px;
    margin: 0 0 8px;
    font-weight: 600;
  }

  .ai-collection-slider__count-{{ ai_gen_id }} {
    font-size: 14px;
    opacity: 0.9;
    margin: 0;
  }

  .ai-collection-slider__nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_icon_color }};
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 2;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-collection-slider__nav-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: translateY(-50%) scale(1.1);
  }

  .ai-collection-slider__nav--prev-{{ ai_gen_id }} {
    left: -24px;
  }

  .ai-collection-slider__nav--next-{{ ai_gen_id }} {
    right: -24px;
  }

  .ai-collection-slider__nav-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
  }

  .ai-collection-slider__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 30px;
  }

  .ai-collection-slider__dot-{{ ai_gen_id }} {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.3;
    border: none;
    padding: 0;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .ai-collection-slider__dot-{{ ai_gen_id }}:hover {
    opacity: 0.6;
  }

  .ai-collection-slider__dot-{{ ai_gen_id }}.active {
    opacity: 1;
    width: 24px;
    border-radius: 5px;
  }

  .ai-collection-slider__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-collection-slider__empty-state-{{ ai_gen_id }} p {
    font-size: 16px;
    margin: 0;
  }

  @media screen and (max-width: 989px) {
    .ai-collection-slider__slide-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - {{ block.settings.gap }}px) / 2);
      min-width: calc((100% - {{ block.settings.gap }}px) / 2);
    }

    .ai-collection-slider__nav--prev-{{ ai_gen_id }} {
      left: 10px;
    }

    .ai-collection-slider__nav--next-{{ ai_gen_id }} {
      right: 10px;
    }
  }

  @media screen and (max-width: 749px) {
    .ai-collection-slider__slide-{{ ai_gen_id }} {
      flex: 0 0 100%;
      min-width: 100%;
    }

    .ai-collection-slider__card-{{ ai_gen_id }} {
      height: {{ block.settings.card_height | times: 0.8 }}px;
    }

    .ai-collection-slider__heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<collection-slider-{{ ai_gen_id }} class="ai-collection-slider-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-collection-slider__container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <div class="ai-collection-slider__header-{{ ai_gen_id }}">
        <h2 class="ai-collection-slider__heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      </div>
    {% endif %}

    {% if block.settings.collections != blank and block.settings.collections.size > 0 %}
      <div class="ai-collection-slider__wrapper-{{ ai_gen_id }}">
        <button
          class="ai-collection-slider__nav-{{ ai_gen_id }} ai-collection-slider__nav--prev-{{ ai_gen_id }}"
          aria-label="Previous slide"
          data-prev
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>

        <div class="ai-collection-slider__track-container-{{ ai_gen_id }}">
          <div class="ai-collection-slider__track-{{ ai_gen_id }}" data-track>
            {% for collection in block.settings.collections %}
              <div class="ai-collection-slider__slide-{{ ai_gen_id }}" data-slide>
                <a href="{{ collection.url }}" class="ai-collection-slider__card-{{ ai_gen_id }}">
                  <div class="ai-collection-slider__image-wrapper-{{ ai_gen_id }}">
                    {% if collection.featured_image %}
                      <img
                        src="{{ collection.featured_image | image_url: width: 800 }}"
                        alt="{{ collection.featured_image.alt | escape }}"
                        class="ai-collection-slider__image-{{ ai_gen_id }}"
                        loading="lazy"
                        width="800"
                        height="{{ block.settings.card_height }}"
                      >
                    {% else %}
                      <div class="ai-collection-slider__placeholder-{{ ai_gen_id }}">
                        {{ 'collection-1' | placeholder_svg_tag }}
                      </div>
                    {% endif %}
                    <div class="ai-collection-slider__overlay-{{ ai_gen_id }}">
                      <h3 class="ai-collection-slider__title-{{ ai_gen_id }}">{{ collection.title }}</h3>
                      {% if block.settings.show_product_count %}
                        <p class="ai-collection-slider__count-{{ ai_gen_id }}">
                          {{ collection.products_count }}
                          {% if collection.products_count == 1 %}
                            product
                          {% else %}
                            products
                          {% endif %}
                        </p>
                      {% endif %}
                    </div>
                  </div>
                </a>
              </div>
            {% endfor %}
          </div>
        </div>

        <button
          class="ai-collection-slider__nav-{{ ai_gen_id }} ai-collection-slider__nav--next-{{ ai_gen_id }}"
          aria-label="Next slide"
          data-next
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>

        {% if block.settings.show_dots %}
          <div class="ai-collection-slider__dots-{{ ai_gen_id }}" data-dots></div>
        {% endif %}
      </div>
    {% else %}
      <div class="ai-collection-slider__empty-state-{{ ai_gen_id }}">
        <p>Next, select collections to display in the slider</p>
      </div>
    {% endif %}
  </div>
</collection-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.slidesPerView = 3;
        this.gap = {{ block.settings.gap }};
        this.isTransitioning = false;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.dotsContainer = this.querySelector('[data-dots]');
        
        if (!this.track) return;

        this.originalSlides = Array.from(this.querySelectorAll('[data-slide]'));
        this.totalOriginalSlides = this.originalSlides.length;

        if (this.totalOriginalSlides === 0) return;

        this.updateSlidesPerView();
        this.cloneSlides();
        this.createDots();
        this.setupEventListeners();
        this.goToSlide(this.totalOriginalSlides, false);
      }

      updateSlidesPerView() {
        const width = window.innerWidth;
        if (width <= 749) {
          this.slidesPerView = 1;
        } else if (width <= 989) {
          this.slidesPerView = 2;
        } else {
          this.slidesPerView = 3;
        }
      }

      cloneSlides() {
        const clonesToAdd = Math.max(this.slidesPerView * 2, this.totalOriginalSlides);
        
        for (let i = 0; i < clonesToAdd; i++) {
          const cloneBefore = this.originalSlides[this.totalOriginalSlides - 1 - (i % this.totalOriginalSlides)].cloneNode(true);
          this.track.insertBefore(cloneBefore, this.track.firstChild);
        }
        
        for (let i = 0; i < clonesToAdd; i++) {
          const cloneAfter = this.originalSlides[i % this.totalOriginalSlides].cloneNode(true);
          this.track.appendChild(cloneAfter);
        }

        this.allSlides = Array.from(this.track.children);
        this.totalSlides = this.allSlides.length;
      }

      createDots() {
        if (!this.dotsContainer) return;
        
        this.dotsContainer.innerHTML = '';
        
        for (let i = 0; i < this.totalOriginalSlides; i++) {
          const dot = document.createElement('button');
          dot.className = 'ai-collection-slider__dot-{{ ai_gen_id }}';
          dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
          if (i === 0) dot.classList.add('active');
          dot.addEventListener('click', () => {
            const targetIndex = this.totalOriginalSlides + i;
            this.goToSlide(targetIndex, true);
          });
          this.dotsContainer.appendChild(dot);
        }
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.prev());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.next());
        }

        let resizeTimer;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(() => {
            const oldSlidesPerView = this.slidesPerView;
            this.updateSlidesPerView();
            if (oldSlidesPerView !== this.slidesPerView) {
              this.track.innerHTML = '';
              this.originalSlides.forEach(slide => this.track.appendChild(slide));
              this.cloneSlides();
              this.createDots();
              this.goToSlide(this.totalOriginalSlides, false);
            }
          }, 250);
        });

        let startX = 0;
        let currentX = 0;
        let isDragging = false;
        let startTime = 0;

        this.track.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          startTime = Date.now();
          isDragging = true;
        }, { passive: true });

        this.track.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        }, { passive: true });

        this.track.addEventListener('touchend', () => {
          if (!isDragging) return;
          const diff = startX - currentX;
          const timeDiff = Date.now() - startTime;
          const velocity = Math.abs(diff) / timeDiff;
          
          if (Math.abs(diff) > 50 || velocity > 0.3) {
            if (diff > 0) {
              this.next();
            } else {
              this.prev();
            }
          }
          isDragging = false;
        });

        this.track.addEventListener('transitionend', () => {
          this.isTransitioning = false;
          this.checkInfiniteLoop();
        });
      }

      goToSlide(index, animate = true) {
        if (this.isTransitioning && animate) return;
        
        this.currentIndex = index;
        
        const slideWidth = this.allSlides[0].offsetWidth;
        const offset = -(this.currentIndex * (slideWidth + this.gap));
        
        if (!animate) {
          this.track.classList.add('no-transition');
          this.track.style.transform = `translateX(${offset}px)`;
          requestAnimationFrame(() => {
            this.track.classList.remove('no-transition');
          });
        } else {
          this.isTransitioning = true;
          this.track.style.transform = `translateX(${offset}px)`;
        }
        
        this.updateDots();
      }

      checkInfiniteLoop() {
        const cloneCount = Math.max(this.slidesPerView * 2, this.totalOriginalSlides);
        
        if (this.currentIndex <= cloneCount - 1) {
          this.currentIndex = this.currentIndex + this.totalOriginalSlides;
          this.goToSlide(this.currentIndex, false);
        } else if (this.currentIndex >= this.totalSlides - cloneCount) {
          this.currentIndex = this.currentIndex - this.totalOriginalSlides;
          this.goToSlide(this.currentIndex, false);
        }
      }

      next() {
        if (this.isTransitioning) return;
        this.goToSlide(this.currentIndex + 1, true);
      }

      prev() {
        if (this.isTransitioning) return;
        this.goToSlide(this.currentIndex - 1, true);
      }

      updateDots() {
        if (!this.dotsContainer) return;
        
        const dots = this.dotsContainer.querySelectorAll('.ai-collection-slider__dot-{{ ai_gen_id }}');
        const cloneCount = Math.max(this.slidesPerView * 2, this.totalOriginalSlides);
        const realIndex = (this.currentIndex - cloneCount) % this.totalOriginalSlides;
        const activeDotIndex = realIndex < 0 ? this.totalOriginalSlides + realIndex : realIndex;
        
        dots.forEach((dot, index) => {
          if (index === activeDotIndex) {
            dot.classList.add('active');
          } else {
            dot.classList.remove('active');
          }
        });
      }
    }

    customElements.define('collection-slider-{{ ai_gen_id }}', CollectionSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collection list slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Shop by collection"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "collection_list",
      "id": "collections",
      "label": "Collections",
      "limit": 12
    },
    {
      "type": "checkbox",
      "id": "show_product_count",
      "label": "Show product count",
      "default": true
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "container_width",
      "min": 800,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Container width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "card_height",
      "min": 200,
      "max": 500,
      "step": 20,
      "unit": "px",
      "label": "Card height",
      "default": 400
    },
    {
      "type": "range",
      "id": "gap",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between slides",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding top",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom",
      "default": 60
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#121212"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "range",
      "id": "collection_title_size",
      "min": 16,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Collection title size",
      "default": 24
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Button color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Button hover color",
      "default": "#F3F3F3"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Icon color",
      "default": "#121212"
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#121212"
    }
  ],
  "presets": [
    {
      "name": "Collection list slider"
    }
  ]
}
{% endschema %}